name: Monkeytype Daily Data Fetch

on:
  schedule:
    - cron: "0 5 * * *" # Runs daily at midnight EST
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  fetch-and-deploy:
    runs-on: ubuntu-latest
    env:
      OUTPUT_FILE: "monkeytype.json"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      - name: Fetch data from Monkeytype
        run: |
          qwerty_response=$(curl -s -w "%{http_code}" "https://api.monkeytype.com/users/wwezGtenkPeTFJTioEK0KZcXWXq1/profile?isUid")
          canary_response=$(curl -s -w "%{http_code}" "https://api.monkeytype.com/users/129CxSj68DhL8PbgNBxazC8oOa73/profile?isUid")
  
          qwerty_status="${qwerty_response: -3}"
          canary_status="${canary_response: -3}"
  
          qwerty_json="${qwerty_response::-3}"
          canary_json="${canary_response::-3}"
  
          if [[ "$qwerty_status" != "200" || "$canary_status" != "200" ]]; then
            echo "Error: Failed to fetch Monkeytype data!"
            exit 1
          fi
  
          jq -nc --sort-keys \
              --argjson qwerty "$(echo "$qwerty_json" | jq -c '{stats: .data.typingStats, bests: .data.personalBests}')" \
              --argjson canary "$(echo "$canary_json" | jq -c '{stats: .data.typingStats, bests: .data.personalBests}')" \
              '{"qwerty": $qwerty, "canary": $canary}' > temp_data.json

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: public
          key: public-cache

      - name: Validate cache
        run: |
          if [ ! -f "public/$OUTPUT_FILE" ]; then
            echo "Cache not found; restoring from Vercel."
            echo "fallback=true" >> $GITHUB_ENV
          fi

      - name: Fallback to Vercel cache
        if: env.fallback == 'true'
        run: |
          if [ ! -f "public/endpoints.json" ]; then
            echo "Error: Failed to locate endpoints.json!"
            exit 1
          fi

          jq -r '.files[]' "public/endpoints.json" | while read -r file; do
            curl -s "https://api.bayrock.dev/$file" -o "public/$file"
          done

      - name: Check for changes
        run: |
          if [ ! -f "public/$OUTPUT_FILE" ]; then
            echo "Cache not found; proceeding with deployment."
          elif cmp --silent <(jq -c --sort-keys '.' "public/$OUTPUT_FILE") <(jq -c --sort-keys '.' temp_data.json); then
            echo "No changes detected; skipping deployment."
            echo "no_changes=true" >> $GITHUB_ENV
          else
            echo "Changes detected; proceeding with deployment."
          fi

      - name: Update API data
        if: env.no_changes == null
        run: |
          jq -c --sort-keys '.' temp_data.json > "public/$OUTPUT_FILE"

      - name: Install Vercel CLI
        if: env.no_changes == null
        run: npm install --global vercel@latest

      - name: Deploy to Vercel
        if: env.no_changes == null
        run: vercel deploy --prod --yes --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }}
