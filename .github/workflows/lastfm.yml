name: Last.fm Hourly Data Fetch

on:
  schedule:
    - cron: "0 * * * *" # Runs every hour
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  fetch-and-deploy:
    runs-on: ubuntu-latest
    env:
      OUTPUT_FILE: "lastfm.json"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      - name: Fetch data from Last.fm
        run: |
          loved_response=$(curl -s -w "%{http_code}" "http://ws.audioscrobbler.com/2.0/?method=user.getlovedtracks&user=bayrock&api_key=${{ secrets.LASTFM_API_KEY }}&limit=1&format=json")
          recent_response=$(curl -s -w "%{http_code}" "http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=bayrock&api_key=${{ secrets.LASTFM_API_KEY }}&limit=10&format=json")
      
          loved_status="${loved_response: -3}"
          recent_status="${recent_response: -3}"
      
          loved_json="${loved_response::-3}"
          recent_json="${recent_response::-3}"
      
          if [[ "$loved_status" != "200" || "$recent_status" != "200" ]]; then
            echo "Error: Failed to fetch Last.fm data!"
            exit 1
          fi
      
          jq -nc \
              --argjson obsession "$(echo "$loved_json" | jq -c '.lovedtracks.track[0]')" \
              --argjson recent "$(echo "$recent_json" | jq -c '.recenttracks.track')" \
              '{"obsession": $obsession, "recent": $recent}' > temp_data.json

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: public
          key: public-cache

      - name: Validate cache
        run: |
          if [ ! -f "public/$OUTPUT_FILE" ]; then
            echo "Cache not found; restoring from Vercel."
            echo "fallback=true" >> $GITHUB_ENV
          fi

      - name: Fallback to Vercel cache
        if: env.fallback == 'true'
        run: |
          if [ ! -f "public/endpoints.json" ]; then
            echo "Error: Failed to locate endpoints.json!"
            exit 1
          fi

          jq -r '.files[]' "public/endpoints.json" | while read -r file; do
            curl -s "https://api.bayrock.dev/$file" -o "public/$file"
          done

      - name: Check for changes
        run: |
          if [ ! -f "public/$OUTPUT_FILE" ]; then
            echo "Cache not found; proceeding with deployment."
          elif cmp --silent "public/$OUTPUT_FILE" temp_data.json; then
            echo "No changes detected; skipping deployment."
            echo "no_changes=true" >> $GITHUB_ENV
          else
            echo "Changes detected; proceeding with deployment."
          fi

      - name: Update API data
        if: env.no_changes == null
        run: |
          cp temp_data.json "public/$OUTPUT_FILE"

      - name: Install Vercel CLI
        if: env.no_changes == null
        run: npm install --global vercel@latest

      - name: Deploy to Vercel
        if: env.no_changes == null
        run: vercel deploy --prod --yes --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }}
