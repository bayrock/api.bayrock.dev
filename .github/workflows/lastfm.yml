name: Last.fm Hourly Data Fetch

on:
  schedule:
    - cron: "0 * * * *" # Runs every hour
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  fetch-and-deploy:
    runs-on: ubuntu-latest
    env:
      OUTPUT_FILE: "lastfm.json"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      - name: Fetch data from Last.fm
        run: |
          loved_response=$(curl -s -w "%{http_code}" -o loved_data.json "http://ws.audioscrobbler.com/2.0/?method=user.getlovedtracks&user=bayrock&api_key=${{ secrets.LASTFM_API_KEY }}&limit=1&format=json")
          recent_response=$(curl -s -w "%{http_code}" -o recent_data.json "http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=bayrock&api_key=${{ secrets.LASTFM_API_KEY }}&limit=10&format=json")

          if [[ "$loved_response" != "200" || "$recent_response" != "200" ]]; then
            echo "Error: Failed to fetch Last.fm data!"
            exit 1
          fi

          loved_data=$(jq -c '.lovedtracks.track[0]' loved_data.json)
          recent_data=$(jq -c '.recenttracks.track' recent_data.json)

          echo "{\"obsession\":$loved_data,\"recent\":$recent_data}" > temp_data.json

          rm loved_data.json recent_data.json

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: public
          key: public-cache

      - name: Validate cache
        run: |
          if [ ! -f "public/$OUTPUT_FILE" ]; then
            echo "Cache not found; restoring from Vercel."
            echo "fallback=true" >> $GITHUB_ENV
          fi

      - name: Fallback to Vercel cache
        if: env.fallback == 'true'
        run: |
          if [ ! -f "public/endpoints.json" ]; then
            echo "Error: Failed to locate endpoints.json!"
            exit 1
          fi

          for file in $(jq -r '.files[]' "public/endpoints.json"); do
            curl -s "https://api.bayrock.dev/$file" -o "public/$file"
          done

      - name: Check for changes
        run: |
          if cmp --silent <(jq -c 'del(.updated)' "public/$OUTPUT_FILE") temp_data.json; then
            echo "No changes detected; skipping deployment."
            echo "no_changes=true" >> $GITHUB_ENV
          else
            echo "Changes detected; proceeding with deployment."
          fi

      - name: Update API data
        if: env.no_changes == null
        run: |
          jq -c --argjson timestamp "$(date +%s)" '. + {updated:$timestamp}' temp_data.json > "public/$OUTPUT_FILE"

      - name: Cache API data
        if: env.no_changes == null
        uses: actions/cache@v3
        with:
          path: public
          key: public-cache

      - name: Deploy to Vercel
        if: env.no_changes == null
        run: vercel deploy --prod --yes --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }}
